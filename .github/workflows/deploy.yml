name: Deploy to Cloud Run

on:
  push:
    branches: [ main, staging ]
  pull_request:
    branches: [ main ]

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  CLOUD_RUN_REGION: ${{ vars.CLOUD_RUN_REGION }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up environment variables
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "ENVIRONMENT=production" >> $GITHUB_ENV
          echo "SERVICE_NAME=failshare-web" >> $GITHUB_ENV
          echo "FIREBASE_API_KEY=${{ secrets.PROD_FIREBASE_API_KEY }}" >> $GITHUB_ENV
          echo "FIREBASE_APP_ID=${{ secrets.PROD_FIREBASE_APP_ID }}" >> $GITHUB_ENV
          echo "FIREBASE_MESSAGING_SENDER_ID=${{ secrets.PROD_FIREBASE_MESSAGING_SENDER_ID }}" >> $GITHUB_ENV
        elif [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
          echo "ENVIRONMENT=staging" >> $GITHUB_ENV
          echo "SERVICE_NAME=failshare-web-staging" >> $GITHUB_ENV
          echo "FIREBASE_API_KEY=${{ secrets.STAGING_FIREBASE_API_KEY }}" >> $GITHUB_ENV
          echo "FIREBASE_APP_ID=${{ secrets.STAGING_FIREBASE_APP_ID }}" >> $GITHUB_ENV
          echo "FIREBASE_MESSAGING_SENDER_ID=${{ secrets.STAGING_FIREBASE_MESSAGING_SENDER_ID }}" >> $GITHUB_ENV
        else
          echo "ENVIRONMENT=development" >> $GITHUB_ENV
          echo "SERVICE_NAME=failshare-web-dev" >> $GITHUB_ENV
          echo "FIREBASE_API_KEY=${{ secrets.DEV_FIREBASE_API_KEY }}" >> $GITHUB_ENV
          echo "FIREBASE_APP_ID=${{ secrets.DEV_FIREBASE_APP_ID }}" >> $GITHUB_ENV
          echo "FIREBASE_MESSAGING_SENDER_ID=${{ secrets.DEV_FIREBASE_MESSAGING_SENDER_ID }}" >> $GITHUB_ENV
        fi

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Configure Docker to use gcloud
      run: gcloud auth configure-docker

    - name: Build Docker image
      run: |
        cd mobile
        docker build \
          --build-arg EXPO_PUBLIC_ENVIRONMENT=${{ env.ENVIRONMENT }} \
          --build-arg EXPO_PUBLIC_FIREBASE_API_KEY="${{ env.FIREBASE_API_KEY }}" \
          --build-arg EXPO_PUBLIC_FIREBASE_AUTH_DOMAIN="${{ vars.FIREBASE_AUTH_DOMAIN }}" \
          --build-arg EXPO_PUBLIC_FIREBASE_PROJECT_ID="${{ vars.FIREBASE_PROJECT_ID }}" \
          --build-arg EXPO_PUBLIC_FIREBASE_STORAGE_BUCKET="${{ vars.FIREBASE_STORAGE_BUCKET }}" \
          --build-arg EXPO_PUBLIC_FIREBASE_MESSAGING_SENDER_ID="${{ env.FIREBASE_MESSAGING_SENDER_ID }}" \
          --build-arg EXPO_PUBLIC_FIREBASE_APP_ID="${{ env.FIREBASE_APP_ID }}" \
          -t gcr.io/${{ env.GCP_PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }} \
          -t gcr.io/${{ env.GCP_PROJECT_ID }}/${{ env.SERVICE_NAME }}:latest .

    - name: Push Docker image
      run: |
        docker push gcr.io/${{ env.GCP_PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
        docker push gcr.io/${{ env.GCP_PROJECT_ID }}/${{ env.SERVICE_NAME }}:latest

    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy ${{ env.SERVICE_NAME }} \
          --image gcr.io/${{ env.GCP_PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }} \
          --region ${{ env.CLOUD_RUN_REGION }} \
          --platform managed \
          --allow-unauthenticated \
          --port 8080 \
          --memory 1Gi \
          --cpu 1 \
          --max-instances 10 \
          --set-env-vars EXPO_PUBLIC_ENVIRONMENT=${{ env.ENVIRONMENT }}

    - name: Show service URL
      run: |
        SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
          --region ${{ env.CLOUD_RUN_REGION }} \
          --format 'value(status.url)')
        echo "ðŸš€ Deployed to: $SERVICE_URL" 