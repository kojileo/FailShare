/// <reference types="jest" />

import { mockStories, mockUserData } from '../../__mocks__/sampleData';

// React Native „Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„ÅÆ„É¢„ÉÉ„ÇØ
jest.mock('react-native', () => ({
  View: 'View',
  Text: 'Text',
  TouchableOpacity: 'TouchableOpacity',
  ScrollView: 'ScrollView',
  StyleSheet: {
    create: jest.fn((styles) => styles),
  },
}));

// React Native Paper „ÅÆ„É¢„ÉÉ„ÇØ
jest.mock('react-native-paper', () => ({
  Text: 'Text',
  Avatar: {
    Image: 'Avatar.Image',
  },
  Searchbar: 'Searchbar',
  Chip: 'Chip',
  IconButton: 'IconButton',
  Surface: 'Surface',
}));

// Navigation „ÅÆ„É¢„ÉÉ„ÇØ
jest.mock('@react-navigation/native', () => ({
  useNavigation: () => ({
    navigate: jest.fn(),
  }),
  useFocusEffect: jest.fn(),
}));

// AuthStore „ÅÆ„É¢„ÉÉ„ÇØ
jest.mock('../../../src/stores/authStore', () => ({
  useAuthStore: () => ({
    user: mockUserData,
  }),
}));

// StoryStore „ÅÆ„É¢„ÉÉ„ÇØ
jest.mock('../../../src/stores/storyStore', () => ({
  useStoryStore: () => ({
    stories: mockStories,
    setStories: jest.fn(),
    setLoading: jest.fn(),
    isLoading: false,
  }),
}));

// StoryService „ÅÆ„É¢„ÉÉ„ÇØ
jest.mock('../../../src/services/storyService', () => ({
  storyService: {
    getStories: jest.fn().mockResolvedValue({ stories: mockStories }),
  },
}));

// Categories Utils „ÅÆ„É¢„ÉÉ„ÇØ
jest.mock('../../../src/utils/categories', () => ({
  getCategoryHierarchyColor: jest.fn(() => '#E91E63'),
  getMainCategories: jest.fn(() => ['ÊÅãÊÑõ', '„Åù„ÅÆ‰ªñ']),
  getCategoryHierarchyIcon: jest.fn(() => 'üíï'),
}));

describe('HomeScreen Component Tests', () => {
  test('search and filter functionality', () => {
    // Ê§úÁ¥¢„Éª„Éï„Ç£„É´„Çø„ÉºÊ©üËÉΩ„ÅÆ„É≠„Ç∏„ÉÉ„ÇØ„ÉÜ„Çπ„Éà
    const stories = mockStories;
    let filteredStories = stories;
    let searchQuery = '';
    let selectedMainCategory = null;

    // „ÉÜ„Ç≠„Çπ„ÉàÊ§úÁ¥¢Ê©üËÉΩ
    const filterBySearch = (query: string) => {
      if (!query.trim()) return stories;
      
      const searchLower = query.toLowerCase();
      return stories.filter(story => 
        story.content.title.toLowerCase().includes(searchLower) ||
        story.content.situation.toLowerCase().includes(searchLower) ||
        story.content.learning.toLowerCase().includes(searchLower)
      );
    };

    // „Ç´„ÉÜ„Ç¥„É™„Éï„Ç£„É´„Çø„ÉºÊ©üËÉΩ
    const filterByCategory = (category: string | null) => {
      if (!category) return stories;
      return stories.filter(story => 
        story.content.category.main === category
      );
    };

    // Ê§úÁ¥¢„ÉÜ„Çπ„Éà
    searchQuery = '„Éá„Éº„Éà';
    filteredStories = filterBySearch(searchQuery);
    expect(filteredStories.length).toBeGreaterThan(0);
    
    // ÊÅãÊÑõ„Ç´„ÉÜ„Ç¥„É™„Éï„Ç£„É´„Çø„Éº„ÉÜ„Çπ„Éà
    selectedMainCategory = 'ÊÅãÊÑõ';
    filteredStories = filterByCategory(selectedMainCategory);
    expect(filteredStories.length).toBeGreaterThan(0);
    expect(filteredStories.every(story => story.content.category.main === 'ÊÅãÊÑõ')).toBe(true);

    // Ë§áÂêàÊ§úÁ¥¢„ÉÜ„Çπ„ÉàÔºàÊ§úÁ¥¢ + „Ç´„ÉÜ„Ç¥„É™Ôºâ
    const combinedFilter = (query: string, category: string | null) => {
      let result = stories;
      
      if (query.trim()) {
        const searchLower = query.toLowerCase();
        result = result.filter(story => 
          story.content.title.toLowerCase().includes(searchLower) ||
          story.content.situation.toLowerCase().includes(searchLower) ||
          story.content.learning.toLowerCase().includes(searchLower)
        );
      }
      
      if (category) {
        result = result.filter(story => 
          story.content.category.main === category
        );
      }
      
      return result;
    };

    filteredStories = combinedFilter('„Éá„Éº„Éà', 'ÊÅãÊÑõ');
    expect(Array.isArray(filteredStories)).toBe(true);
  });

  test('time ago calculation', () => {
    // ÊôÇÈñìË°®Á§∫Ê©üËÉΩ„ÅÆ„ÉÜ„Çπ„Éà
    const getTimeAgo = (date: any): string => {
      try {
        let actualDate: Date;
        if (date && typeof date.toDate === 'function') {
          actualDate = date.toDate();
        } else if (date instanceof Date) {
          actualDate = date;
        } else if (date && typeof date === 'object' && date.seconds) {
          actualDate = new Date(date.seconds * 1000);
        } else {
          return '‰∏çÊòé';
        }

        const now = new Date();
        const diffInHours = Math.floor((now.getTime() - actualDate.getTime()) / (1000 * 60 * 60));
        
        if (diffInHours < 1) return '‰ªä';
        if (diffInHours < 24) return `${diffInHours}ÊôÇÈñìÂâç`;
        if (diffInHours < 168) return `${Math.floor(diffInHours / 24)}Êó•Ââç`;
        return actualDate.toLocaleDateString('ja-JP', { month: 'short', day: 'numeric' });
      } catch (error) {
        return '‰∏çÊòé';
      }
    };

    // ÁèæÂú®ÊôÇÂàª„ÅÆ„ÉÜ„Çπ„Éà
    const now = new Date();
    expect(getTimeAgo(now)).toBe('‰ªä');

    // 1ÊôÇÈñìÂâç„ÅÆ„ÉÜ„Çπ„Éà
    const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000);
    expect(getTimeAgo(oneHourAgo)).toBe('1ÊôÇÈñìÂâç');

    // Firestore„Çø„Ç§„É†„Çπ„Çø„É≥„ÉóÂΩ¢Âºè„ÅÆ„ÉÜ„Çπ„Éà
    const firestoreTimestamp = { seconds: Date.now() / 1000 - 86400 };
    const result = getTimeAgo(firestoreTimestamp);
    expect(result).toContain('Êó•Ââç');

    // ÁÑ°Âäπ„Å™Êó•‰ªò„ÅÆ„ÉÜ„Çπ„Éà
    expect(getTimeAgo(null)).toBe('‰∏çÊòé');
    expect(getTimeAgo(undefined)).toBe('‰∏çÊòé');
  });

  test('emotion color mapping', () => {
    // ÊÑüÊÉÖËâ≤„Éû„ÉÉ„Éî„É≥„Ç∞„ÅÆ„ÉÜ„Çπ„Éà
    const getEmotionColor = (emotion: string): string => {
      const emotionColors: { [key: string]: string } = {
        'ÂæåÊÇî': '#FF6B6B',
        'ÊÅ•„Åö„Åã„Åó„ÅÑ': '#FFB347',
        'ÊÇ≤„Åó„ÅÑ': '#4ECDC4',
        '‰∏çÂÆâ': '#95E1D3',
        'ÊÄí„Çä': '#F38BA8',
        'Ê∑∑‰π±': '#DDA0DD',
        '„Åù„ÅÆ‰ªñ': '#B0BEC5'
      };
      return emotionColors[emotion] || '#B0BEC5';
    };

    expect(getEmotionColor('ÂæåÊÇî')).toBe('#FF6B6B');
    expect(getEmotionColor('ÊÅ•„Åö„Åã„Åó„ÅÑ')).toBe('#FFB347');
    expect(getEmotionColor('Â≠òÂú®„Åó„Å™„ÅÑÊÑüÊÉÖ')).toBe('#B0BEC5');
    expect(getEmotionColor('')).toBe('#B0BEC5');
  });

  test('story navigation functionality', () => {
    // „Çπ„Éà„Éº„É™„Éº„Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥Ê©üËÉΩ„ÅÆ„ÉÜ„Çπ„Éà
    const mockNavigation = {
      navigate: jest.fn(),
    };

    const handleStoryPress = (storyId: string) => {
      mockNavigation.navigate('StoryDetail', { storyId });
    };

    const handleCreateStory = () => {
      mockNavigation.navigate('CreateStory');
    };

    const handleProfilePress = () => {
      mockNavigation.navigate('Profile');
    };

    // „Çπ„Éà„Éº„É™„ÉºË©≥Á¥∞ÈÅ∑Áßª„ÉÜ„Çπ„Éà
    handleStoryPress('test-story-1');
    expect(mockNavigation.navigate).toHaveBeenCalledWith('StoryDetail', { storyId: 'test-story-1' });

    // Êñ∞Ë¶è‰ΩúÊàêÈÅ∑Áßª„ÉÜ„Çπ„Éà
    handleCreateStory();
    expect(mockNavigation.navigate).toHaveBeenCalledWith('CreateStory');

    // „Éó„É≠„Éï„Ç£„Éº„É´ÈÅ∑Áßª„ÉÜ„Çπ„Éà
    handleProfilePress();
    expect(mockNavigation.navigate).toHaveBeenCalledWith('Profile');
  });

  test('empty state handling', () => {
    // Á©∫Áä∂ÊÖã„ÅÆÂá¶ÁêÜ„ÉÜ„Çπ„Éà
    const stories = [];
    const isLoading = false;
    const searchQuery = '';
    const selectedMainCategory = null;

    const shouldShowEmpty = stories.length === 0 && !isLoading;
    const isSearchActive = Boolean(searchQuery || selectedMainCategory);

    expect(shouldShowEmpty).toBe(true);
    expect(isSearchActive).toBe(false);

    // Ê§úÁ¥¢‰∏≠„ÅÆÁ©∫Áä∂ÊÖã
    const searchQueryActive = '„ÉÜ„Çπ„ÉàÊ§úÁ¥¢';
    const isSearchActiveWithQuery = Boolean(searchQueryActive || selectedMainCategory);
    expect(isSearchActiveWithQuery).toBe(true);
  });

  test('data loading state management', () => {
    // „Éá„Éº„ÇøË™≠„ÅøËæº„ÅøÁä∂ÊÖãÁÆ°ÁêÜ„ÅÆ„ÉÜ„Çπ„Éà
    let isLoading = false;
    let stories = [];
    let user = mockUserData;

    const loadStories = async (showLoading = true) => {
      if (!user) {
        console.log('‚ö†Ô∏è „É¶„Éº„Ç∂„ÉºÊú™Ë™çË®º„ÅÆ„Åü„ÇÅ„ÄÅ„Çπ„Éà„Éº„É™„ÉºÂèñÂæó„Çí„Çπ„Ç≠„ÉÉ„Éó');
        return;
      }

      if (showLoading) isLoading = true;
      
      // „É¢„ÉÉ„ÇØ API „Ç≥„Éº„É´
      try {
        await new Promise(resolve => setTimeout(resolve, 100));
        stories = mockStories;
      } catch (error) {
        console.error('„Çπ„Éà„Éº„É™„ÉºÂèñÂæó„Ç®„É©„Éº:', error);
      } finally {
        if (showLoading) isLoading = false;
      }
    };

    // Ë™çË®ºÊ∏à„Åø„É¶„Éº„Ç∂„Éº„Åß„ÅÆË™≠„ÅøËæº„Åø„ÉÜ„Çπ„Éà
    expect(user).toBeDefined();
    return loadStories().then(() => {
      expect(stories.length).toBeGreaterThan(0);
      expect(isLoading).toBe(false);
    });
  });
}); 