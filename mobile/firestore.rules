rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // 匿名ユーザープロフィール
    match /anonymousUsers/{userId} {
      // 認証済みユーザーのみアクセス可能
      allow read, write: if request.auth != null && request.auth.uid == userId;
      // 自分のプロフィールのみ読み書き可能
    }
    
    // 投稿された失敗談
    match /stories/{storyId} {
      // 読み取りは認証済みユーザーのみ
      allow read: if request.auth != null;
      
      // 作成は認証済みユーザーのみ、authorIdが自分のuidと一致する場合のみ
      allow create: if request.auth != null 
                    && request.auth.uid == resource.data.authorId
                    && validateStoryData(request.resource.data);
      
      // 更新は投稿者のみ（メタデータの更新は除く）
      allow update: if request.auth != null
                    && request.auth.uid == resource.data.authorId
                    && validateStoryUpdate(request.resource.data, resource.data);
      
      // 削除は投稿者のみ
      allow delete: if request.auth != null && request.auth.uid == resource.data.authorId;
    }
    
    // 統計情報やメタデータの更新（閲覧数、役に立ったカウント等）
    match /stories/{storyId} {
      // メタデータの更新（閲覧数、役に立ったカウント）は認証済みユーザーのみ
      allow update: if request.auth != null
                    && onlyMetadataChanged(request.resource.data, resource.data);
    }
    
    // コメント機能（将来実装予定）
    match /stories/{storyId}/comments/{commentId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null 
                    && request.auth.uid == request.resource.data.authorId;
      allow update, delete: if request.auth != null 
                            && request.auth.uid == resource.data.authorId;
    }
    
    // ユーザー統計情報の更新（anonymousUsersコレクション）
    match /anonymousUsers/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // 他のドキュメントへのアクセスを拒否
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

// 投稿データの検証関数
function validateStoryData(data) {
  return data.keys().hasAll(['authorId', 'content', 'metadata']) &&
         data.content.keys().hasAll(['title', 'category', 'situation', 'action', 'result', 'learning', 'emotion']) &&
         data.metadata.keys().hasAll(['createdAt', 'viewCount', 'helpfulCount', 'commentCount', 'tags']) &&
         data.content.title is string &&
         data.content.title.size() <= 50 &&
         data.content.category in ['仕事', '恋愛', 'お金', '健康', '人間関係', '学習', 'その他'] &&
         data.content.situation is string &&
         data.content.situation.size() <= 500 &&
         data.content.action is string &&
         data.content.action.size() <= 500 &&
         data.content.result is string &&
         data.content.result.size() <= 500 &&
         data.content.learning is string &&
         data.content.learning.size() <= 500 &&
         data.content.emotion in ['後悔', '恥ずかしい', '悲しい', '不安', '怒り', '混乱', 'その他'] &&
         data.metadata.viewCount is int &&
         data.metadata.helpfulCount is int &&
         data.metadata.commentCount is int &&
         data.metadata.tags is list;
}

// 投稿更新データの検証関数
function validateStoryUpdate(newData, oldData) {
  // 基本的に投稿者は自分の投稿のcontentのみ更新可能
  return newData.authorId == oldData.authorId &&
         newData.metadata == oldData.metadata &&
         validateStoryData(newData);
}

// メタデータのみの更新かどうかを確認
function onlyMetadataChanged(newData, oldData) {
  return newData.authorId == oldData.authorId &&
         newData.content == oldData.content &&
         (newData.metadata.viewCount >= oldData.metadata.viewCount ||
          newData.metadata.helpfulCount >= oldData.metadata.helpfulCount ||
          newData.metadata.commentCount >= oldData.metadata.commentCount);
} 