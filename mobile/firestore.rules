rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // 🔒 全環境統一ルール（個人開発向け最適化版）
    
    // 匿名ユーザープロフィール
    match /anonymousUsers/{userId} {
      // 読み取り：認証済みユーザーは全ユーザーの基本情報にアクセス可能（フレンド推薦機能のため）
      allow read: if request.auth != null;
      
      // 書き込み：自分のプロフィールのみ
      allow write: if request.auth != null && request.auth.uid == userId;
      
      // フレンド機能による統計更新を許可（stats.friendsCountのみ）
      allow update: if request.auth != null 
                    && (request.auth.uid == userId || 
                        (request.auth.uid != userId && 
                         request.resource.data.stats.friendsCount is int &&
                         request.resource.data.stats.friendsCount >= 0));
    }
    
         // ユーザープロフィール（通常のユーザー）
     match /users/{userId} {
       // 認証済みユーザーのみ、自分のプロフィールにアクセス可能
       allow read: if request.auth != null;
       allow write: if request.auth != null && request.auth.uid == userId;
     }
    
    // いいね機能
    match /likes/{likeId} {
      // 読み取り：認証済みユーザーのみ
      allow read: if request.auth != null;
      
      // 作成：認証済みユーザーのみ、自分のいいねのみ
      allow create: if request.auth != null 
                    && request.auth.uid == request.resource.data.userId
                    && validateLikeData(request.resource.data);
      
      // 削除：自分のいいねのみ
      allow delete: if request.auth != null 
                    && request.auth.uid == resource.data.userId;
    }
    
    // 投稿された失敗談
    match /stories/{storyId} {
      // 読み取りは認証済みユーザーのみ
      allow read: if request.auth != null;
      
      // 作成：認証済み、authorIdが一致、データ検証通過の場合のみ
      allow create: if request.auth != null 
                    && request.auth.uid == request.resource.data.authorId
                    && validateStoryData(request.resource.data);
      
      // 更新：投稿者のみ、データ検証も実行
      allow update: if request.auth != null
                    && request.auth.uid == resource.data.authorId
                    && validateStoryUpdate(request.resource.data, resource.data);
      
      // 削除：投稿者のみ
      allow delete: if request.auth != null && request.auth.uid == resource.data.authorId;
    }
    
    // 統計情報やメタデータの更新（閲覧数、役に立ったカウント等）
    match /stories/{storyId} {
      // メタデータの更新（閲覧数、役に立ったカウント）は認証済みユーザーのみ
      allow update: if request.auth != null
                    && onlyMetadataChanged(request.resource.data, resource.data);
    }
    
    // コメント機能（独立したコレクション）
    match /comments/{commentId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null 
                    && request.auth.uid == request.resource.data.authorId
                    && validateCommentData(request.resource.data);
      allow update, delete: if request.auth != null 
                            && request.auth.uid == resource.data.authorId;
    }
    
    // フレンド機能
    match /friendships/{friendshipId} {
      allow read: if request.auth != null 
                  && (request.auth.uid == resource.data.userId || request.auth.uid == resource.data.friendId);
      allow create: if request.auth != null 
                    && validateFriendshipData(request.resource.data)
                    && (request.auth.uid == request.resource.data.userId || 
                        request.auth.uid == request.resource.data.friendId);
      allow delete: if request.auth != null 
                    && (request.auth.uid == resource.data.userId || request.auth.uid == resource.data.friendId);
    }
    
    // フレンドリクエスト機能
    match /friendRequests/{requestId} {
      allow read: if request.auth != null 
                  && (request.auth.uid == resource.data.fromUserId || request.auth.uid == resource.data.toUserId);
      allow create: if request.auth != null 
                    && request.auth.uid == request.resource.data.fromUserId
                    && validateFriendRequestData(request.resource.data);
      allow update: if request.auth != null 
                    && (request.auth.uid == resource.data.toUserId || request.auth.uid == resource.data.fromUserId)
                    && validateFriendRequestUpdate(request.resource.data, resource.data);
      allow delete: if request.auth != null 
                    && (request.auth.uid == resource.data.fromUserId || request.auth.uid == resource.data.toUserId);
    }

    // チャット機能
    match /chats/{chatId} {
      allow read: if request.auth != null 
                  && request.auth.uid in resource.data.participants;
      allow create: if request.auth != null 
                    && request.auth.uid in request.resource.data.participants
                    && validateChatData(request.resource.data);
      allow update: if request.auth != null 
                    && request.auth.uid in resource.data.participants
                    && validateChatUpdate(request.resource.data, resource.data);
      allow delete: if request.auth != null 
                    && request.auth.uid in resource.data.participants;
    }

         // チャットメッセージ機能
     match /messages/{messageId} {
       allow read: if request.auth != null 
                   && request.auth.uid in get(/databases/$(database)/documents/chats/$(resource.data.chatId)).data.participants;
       allow create: if request.auth != null 
                     && request.auth.uid == request.resource.data.senderId
                     && request.auth.uid in get(/databases/$(database)/documents/chats/$(request.resource.data.chatId)).data.participants
                     && validateMessageData(request.resource.data);
       allow update: if request.auth != null 
                     && (request.auth.uid == resource.data.senderId || 
                         (request.auth.uid in get(/databases/$(database)/documents/chats/$(resource.data.chatId)).data.participants && 
                          request.resource.data.keys().hasAll(['isRead'])));
       allow delete: if request.auth != null 
                     && request.auth.uid == resource.data.senderId;
     }    
    // ユーザーブロック機能
    match /userBlocks/{blockId} {
      allow read: if request.auth != null 
                  && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null 
                    && request.auth.uid == request.resource.data.userId
                    && validateUserBlockData(request.resource.data);
      allow delete: if request.auth != null 
                    && request.auth.uid == resource.data.userId;
    }
    
    // ユーザー統計情報の更新検証は上記のanonymousUsersルールに統合済み
    
    // 開発・テスト用データ（全環境で利用可能）
    match /dev_tests/{document} {
      allow read, write: if request.auth != null;
    }
    
    match /staging_tests/{document} {
      allow read, write: if request.auth != null;
    }
    
    // 管理者専用データ（管理者のみアクセス可能）
    match /admin/{document=**} {
      allow read, write: if request.auth != null 
                         && request.auth.token.admin == true;
    }
    
    // 他のドキュメントへのアクセスを拒否
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

// 投稿データの検証関数（階層カテゴリ対応版）
function validateStoryData(data) {
  return data.keys().hasAll(['authorId', 'content', 'metadata']) &&
         data.content.keys().hasAll(['title', 'category', 'situation', 'action', 'result', 'learning', 'emotion']) &&
         data.metadata.keys().hasAll(['createdAt', 'viewCount', 'helpfulCount', 'commentCount', 'tags']) &&
         // タイトル検証
         data.content.title is string &&
         data.content.title.size() >= 1 && data.content.title.size() <= 100 &&
         // 階層カテゴリ検証
         validateCategoryHierarchy(data.content.category) &&
         // 各フィールドの詳細検証
         data.content.situation is string &&
         data.content.situation.size() >= 1 && data.content.situation.size() <= 280 &&
         data.content.action is string &&
         data.content.action.size() >= 1 && data.content.action.size() <= 280 &&
         data.content.result is string &&
         data.content.result.size() >= 1 && data.content.result.size() <= 280 &&
         data.content.learning is string &&
         data.content.learning.size() >= 1 && data.content.learning.size() <= 280 &&
         validateEmotion(data.content.emotion) &&
         // メタデータ検証（新規投稿は0から開始）
         data.metadata.viewCount is int && data.metadata.viewCount >= 0 &&
         data.metadata.helpfulCount is int && data.metadata.helpfulCount >= 0 &&
         data.metadata.commentCount is int && data.metadata.commentCount >= 0 &&
         data.metadata.tags is list && data.metadata.tags.size() <= 10 &&
         data.metadata.createdAt is timestamp;
}

// 階層カテゴリの検証関数
function validateCategoryHierarchy(category) {
  // 空のオブジェクトやnullの場合は後方互換性のため許可
  return category == null || 
         category.keys().size() == 0 ||
         (category.keys().hasAll(['main', 'sub']) &&
          validateMainCategory(category.main) &&
          validateSubCategory(category.main, category.sub));
}

// メインカテゴリの検証
function validateMainCategory(mainCategory) {
  return mainCategory == null || mainCategory == '' || mainCategory in ['恋愛', '仕事', 'その他'];
}

// サブカテゴリの検証（メインカテゴリに応じて）
function validateSubCategory(mainCategory, subCategory) {
  return mainCategory == null || subCategory == null || subCategory == '' ||
         (mainCategory == '恋愛' && subCategory in ['デート', '告白', 'カップル', '片想い', '別れ']) ||
         (mainCategory == '仕事' && subCategory in ['職場人間関係', '転職・キャリア', 'プレゼン・会議', 'プロジェクト管理', 'スキル習得']) ||
         (mainCategory == 'その他' && subCategory == 'その他');
}

// 感情の検証
function validateEmotion(emotion) {
  return emotion == null || emotion == '' || emotion in ['後悔', '恥ずかしい', '悲しい', '不安', '怒り', '混乱', 'その他'];
}

// コメントデータの検証関数
function validateCommentData(data) {
  return data.keys().hasAll(['authorId', 'content', 'createdAt']) &&
         data.content is string &&
         data.content.size() >= 1 && data.content.size() <= 500 &&
         data.authorId is string &&
         data.authorId == request.auth.uid &&
         data.createdAt is timestamp;
}

// 投稿更新データの検証関数
function validateStoryUpdate(newData, oldData) {
  return newData.authorId == oldData.authorId &&
         newData.metadata.createdAt == oldData.metadata.createdAt && // 作成日時は変更不可
         validateStoryData(newData);
}

// ユーザー統計更新の検証
function validateUserStatsUpdate(newData, oldData) {
  // oldDataが存在しない場合（初回作成）も許可
  return (oldData == null || (
    newData.keys().hasAll(['stats']) &&
    newData.stats.keys().hasAll(['totalPosts', 'totalComments', 'helpfulVotes', 'learningPoints']) &&
    newData.stats.totalPosts is int && newData.stats.totalPosts >= 0 &&
    newData.stats.totalComments is int && newData.stats.totalComments >= 0 &&
    newData.stats.helpfulVotes is int && newData.stats.helpfulVotes >= 0 &&
    newData.stats.learningPoints is int && newData.stats.learningPoints >= 0
  ));
}

// メタデータのみの更新かどうかを確認
function onlyMetadataChanged(newData, oldData) {
  return newData.authorId == oldData.authorId &&
         newData.content == oldData.content &&
         newData.metadata.createdAt == oldData.metadata.createdAt && // 作成日時は変更不可
         // メタデータは増加のみ許可
         (newData.metadata.viewCount >= oldData.metadata.viewCount ||
          newData.metadata.helpfulCount >= oldData.metadata.helpfulCount ||
          newData.metadata.commentCount >= oldData.metadata.commentCount);
} 

// いいねデータの検証関数
function validateLikeData(data) {
  return data.keys().hasAll(['storyId', 'userId', 'createdAt']) &&
         data.storyId is string &&
         data.storyId.size() > 0 &&
         data.userId is string &&
         data.userId == request.auth.uid &&
         data.createdAt is timestamp;
}

// フレンドシップデータの検証関数
function validateFriendshipData(data) {
  return data.keys().hasAll(['userId', 'friendId', 'status', 'createdAt']) &&
         data.userId is string &&
         data.friendId is string &&
         data.friendId.size() > 0 &&
         data.userId != data.friendId &&
         data.status in ['pending', 'accepted', 'blocked'] &&
         data.createdAt is timestamp;
}

// フレンドリクエストデータの検証関数
function validateFriendRequestData(data) {
  return data.keys().hasAll(['fromUserId', 'toUserId', 'status', 'createdAt']) &&
         data.fromUserId is string &&
         data.fromUserId == request.auth.uid &&
         data.toUserId is string &&
         data.toUserId.size() > 0 &&
         data.fromUserId != data.toUserId &&
         data.status == 'pending' &&
         data.createdAt is timestamp;
}

// フレンドリクエスト更新の検証関数
function validateFriendRequestUpdate(newData, oldData) {
  return newData.fromUserId == oldData.fromUserId &&
         newData.toUserId == oldData.toUserId &&
         newData.createdAt == oldData.createdAt &&
         newData.status in ['pending', 'accepted', 'rejected'] &&
         (oldData.status == 'pending' || newData.status == oldData.status);
}

// ユーザーブロックデータの検証関数
function validateUserBlockData(data) {
  return data.keys().hasAll(['userId', 'blockedUserId', 'createdAt']) &&
         data.userId is string &&
         data.userId == request.auth.uid &&
         data.blockedUserId is string &&
         data.blockedUserId.size() > 0 &&
         data.userId != data.blockedUserId &&
         data.createdAt is timestamp;
}

// チャットデータの検証関数
function validateChatData(data) {
  return data.keys().hasAll(['participants', 'createdAt', 'updatedAt']) &&
         data.participants is list &&
         data.participants.size() == 2 &&
         request.auth.uid in data.participants &&
         data.createdAt is timestamp &&
         data.updatedAt is timestamp;
}

// チャット更新の検証関数
function validateChatUpdate(newData, oldData) {
  return newData.participants == oldData.participants &&
         newData.createdAt == oldData.createdAt &&
         request.auth.uid in newData.participants;
}

// メッセージデータの検証関数
function validateMessageData(data) {
  return data.keys().hasAll(['chatId', 'senderId', 'content', 'messageType', 'createdAt']) &&
         data.chatId is string &&
         data.chatId.size() > 0 &&
         data.senderId is string &&
         data.senderId == request.auth.uid &&
         data.content is string &&
         data.content.size() >= 1 && data.content.size() <= 1000 &&
         data.messageType in ['text', 'image', 'file'] &&
         data.createdAt is timestamp;
}

// メッセージ更新の検証関数
function validateMessageUpdate(newData, oldData) {
  return newData.chatId == oldData.chatId &&
         newData.senderId == oldData.senderId &&
         newData.createdAt == oldData.createdAt &&
         newData.content is string &&
         newData.content.size() >= 1 && newData.content.size() <= 1000 &&
         newData.messageType in ['text', 'image', 'file'];
}

 